v3.8.0-adaptive-api-compatibility
- **核心重构: 实现API自适应兼容层，大幅提升对非标准API的兼容性**
  - **问题:** 许多第三方或自建的API代理、中转服务并不完全遵循OpenAI的API规范，它们可能返回非标准的JSON格式（如JSON字符串、数据嵌套），或使用不同的字段名（如用`model`代替`id`），导致插件的API功能（测试、获取模型、生成内容）频繁失败。
  - **解决方案:** 放弃让用户手动配置的路线，转而实现一个智能的、自动化的“自适应兼容层”，在后台无感地处理这些API“方言”。
  - **实现方式 (`scripts/settings/standaloneAPI.js`):**
    - **1. 新增统一响应规范化函数 (`normalizeApiResponse`):**
        - 创建了一个新的内部函数，用于在处理任何API响应数据前进行预处理。
        - **自动解析JSON字符串:** 如果API返回的是一个文本字符串，该函数会尝试将其`JSON.parse()`为标准对象。
        - **自动解开数据嵌套:** 如果响应被不必要地包裹在额外的`data`对象中（例如`{"data": {"data": [...]}}`），该函数会自动解开，提取出真正的核心数据。
    - **2. 全面应用规范化:**
        - 在`testApiConnection`、`handleCustomAPIRequest`和`updateModelList`三个核心函数中，所有的响应数据现在都会先通过`normalizeApiResponse`进行清洗和规范化，然后再进行后续处理。这确保了无论API返回的结构多么“奇怪”，插件都能以统一、标准的方式来处理它。
    - **3. 智能识别模型ID:**
        - 修改了`updateModelList`函数中的模型解析逻辑。
        - 现在，在获取模型列表时，它会首先尝试读取标准的`model.id`字段。如果不存在，它会自动**回退(fallback)到非标准的`model.model`字段**。
  - **结果:**
    - **终极兼容性:** 插件现在能够自动适应并兼容大量非标准的API实现，大大减少了因API“方言”不同而导致的连接和解析错误。
    - **无缝的用户体验:** 所有兼容性修正都在后台自动完成，用户无需进行任何额外配置。这使得插件的自定义API功能真正做到了“即插即用”，极大地提升了易用性和稳定性。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.7.0-research-frontend-api
- **研究任务: 分析SillyTavern原生API请求机制，评估前端化可行性**
  - **目标:** 深入研究SillyTavern原版代码，特别是 `src/endpoints/openai.js` 和 `src/endpoints/google.js`，以理解其API请求的处理方式，并评估是否能像本插件的演进方向一样，将请求逻辑完全迁移到前端执行。
  - **分析过程:**
    - **1. 文件定位:** 确认了目标文件位于 `SillyTavern-1.13.1/SillyTavern-1.13.1/src/endpoints/` 目录。
    - **2. `openai.js` 分析:**
        - 该文件是一个基于Node.js和Express的后端API路由。
        - **核心职责:** 作为一个安全的**后端代理**。它从服务器的安全存储中读取用户的API密钥 (`readSecret`)，构建请求，然后将请求转发给真正的OpenAI API。
        - **存在目的:** 解决两大核心问题：**API密钥安全**（避免在浏览器中暴露密钥）和 **CORS跨域限制**（浏览器会阻止向`api.openai.com`的直接请求）。
    - **3. `google.js` 分析:**
        - 与`openai.js`模式相同，也是一个后端代理。
        - **包含更复杂的认证逻辑:** 除了简单的API Key，还处理Google Cloud的**服务账户认证**，这涉及到在后端使用`crypto`模块生成JWT令牌并获取访问令牌，此过程绝无可能在前端完成。
  - **结论:**
    - **前端化不可行:** 将SillyTavern原生的`openai.js`和`google.js`的逻辑直接迁移到前端是**完全不可行且极不安全的**。
    - **根本原因:**
        - **1. 安全性 (Security):** 前端化会直接暴露用户的私密API密钥，带来严重安全风险。
        - **2. 跨域限制 (CORS):** 主流商业API（如OpenAI, Google）的服务器出于安全考虑，不允许来自任意第三方网站（如用户的SillyTavern实例）的直接脚本请求。所有前端请求都会被浏览器拦截而失败。
        - **3. 后端依赖 (Backend Dependencies):** `google.js`的认证流程依赖于Node.js的加密和文件系统等核心库，无法在浏览器环境中运行。
    - **总结:** SillyTavern采用的**后端代理模式**是与商业级第三方API安全交互的行业标准和最佳实践。本插件之所以能实现前端直连，是因为其目标API是用户自托管的、通常已放开CORS限制的兼容接口，这与SillyTavern原生需要对接的公共API在安全策略上有着本质区别。
  - **受影响文件:**
    - `项目文档.txt` (新增此条目)

v3.6.2-silent-retry
- **体验优化：实现无感知的API请求重试**
  - **问题:** 在v3.6.1的混合请求模式中，当第一种模式（后端代理）失败并切换到第二种模式（前端直连）时，会向用户显示一个错误提示。这中断了操作的流畅性，给用户带来了不必要的困扰。
  - **实现方式:**
    - **1. 移除中间错误提示 (`scripts/settings/standaloneAPI.js`):**
        - 在 `updateModelList` 和 `testApiConnection` 函数的 `catch` 块中，移除了当代理模式失败时调用的 `EDITOR.error`。
        - 现在，只有当两种模式都尝试过并全部失败后，才会向用户显示一个包含了两种模式失败原因的最终错误信息。
    - **2. 保持加载提示的持续性 (`scripts/settings/standaloneAPI.js`):**
        - 调整了 `handleCustomAPIRequest` 函数中的 `loadingToast` 逻辑，确保加载提示框在整个自动重试流程中（包括从代理模式切换到直连模式）都保持可见，直到请求最终成功或彻底失败。
  - **结果:**
    - **无缝的用户体验:** API请求的故障切换过程现在对用户完全透明。用户不会看到中间的错误提示，只会看到一个持续的加载指示器，直到操作完成或最终失败，这使得整个体验更加流畅和专业。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.6.1-hybrid-api-request-all
- **核心重构：将混合API请求模式应用于所有API调用**
  - **问题:** v3.6.0只为模型列表获取和API测试实现了混合请求模式，而实际的表格填充（`handleCustomAPIRequest`）仍然只使用单一的后端代理模式，这使得在某些特定网络环境下，即使用户能成功获取模型列表，实际的填表功能也可能失败。
  - **实现方式:**
    - **1. 全面应用混合模式 (`scripts/settings/standaloneAPI.js`):**
        - 对 `handleCustomAPIRequest` 函数进行了与 `updateModelList` 和 `testApiConnection` 相同的重构。
        - 现在，当调用自定义API进行表格填充时，它会首先尝试通过SillyTavern后端代理进行请求。
        - 如果代理请求失败，它会自动、无感地切换到前端直连模式 (`fetch`) 进行重试。
        - 只有当两种模式都失败后，才会向用户报告一个包含了两种模式失败原因的复合错误信息。
  - **结果:**
    - **终极兼容性与稳定性:** 现在插件的所有核心API交互功能（测试、获取模型、生成内容）都具备了自动故障切换能力。这确保了无论用户的网络环境或API提供商的配置如何，插件都能以最大可能成功执行，提供了最稳定、最无缝的用户体验。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.6.0-hybrid-api-request
- **核心重构：实现混合API请求模式以达到最大兼容性**
  - **问题:** 单独使用后端代理模式或前端直连模式都无法完美解决所有问题。代理模式解决了CORS（跨域）问题，但可能因服务器配置导致认证失败；直连模式解决了认证问题，但会触发浏览器的CORS安全限制。
  - **实现方式:**
    - **1. 实现自动故障切换 (`scripts/settings/standaloneAPI.js`):**
        - 重构了 `updateModelList` 和 `testApiConnection` 函数，使其内部包含两种请求模式。
        - **默认首先尝试“后端代理”模式** (`$.ajax`)。这是最通用的方式，可以避免大多数CORS问题。
        - **如果代理模式请求失败**，代码会自动捕获错误，并**无缝切换到“前端直连”模式** (`fetch`) 进行重试。
        - 只有当两种模式都失败时，才会向用户报告最终的复合错误信息，明确指出两种模式的失败原因。
    - **2. 移除不必要的用户选项 (`assets/templates/index.html`):**
        - 删除了之前为解决此问题而添加的“绕过酒馆代理”复选框，因为现在插件可以自动处理模式切换，不再需要用户手动干预。
  - **结果:**
    - **终极兼容性:** 插件现在能够智能地自动适应不同的API和网络环境。无论是需要代理的、有CORS限制的API，还是必须直接连接的API，插件都能在无需用户干预的情况下找到成功路径。
    - **最佳用户体验:** 用户不再需要理解复杂的CORS或代理概念，也无需手动切换选项。插件在后台自动完成所有尝试，提供了无缝、可靠的体验。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `assets/templates/index.html`
    - `项目文档.txt` (新增此条目)

v3.5.2-hotfix-cors-and-auth
- **核心重构：恢复后端代理以解决CORS问题并修正认证**
  - **问题:** v3.5.0和v3.5.1的修改在解决了部分问题的同时，引入了新的CORS（跨域资源共享）错误。直接从前端 `fetch` API会导致浏览器安全策略阻止跨域请求。
  - **实现方式:**
    - **1. 全面恢复后端代理 (`scripts/settings/standaloneAPI.js`):**
        - `testApiConnection` 和 `updateModelList` 函数都已恢复为v3.4.9的状态，即通过 `$.ajax` 向SillyTavern后端的 `/api/backends/chat-completions/...` 端点发送请求。这是解决CORS问题的唯一可靠方法。
    - **2. 确保认证信息传递 (`scripts/settings/standaloneAPI.js`):**
        - 确认了在 `testApiConnection` 和 `updateModelList` 的 `$.ajax` 请求体中，都包含了 `api_key: apiKeys[0]` 字段。这确保了我们自定义的API Key能够被传递给SillyTavern后端，后端在转发请求时会使用这个Key，从而解决认证失败的问题。
    - **3. 保留兼容性修复 (`scripts/settings/standaloneAPI.js`):**
        - 保留了所有先前版本中对API响应的兼容性处理，包括解析JSON字符串和处理嵌套的 `data` 对象。
  - **结果:**
    - **最终解决方案:** 此版本结合了代理模式和正确的密钥传递，应能同时解决CORS和认证问题，为不同类型的API提供最广泛的兼容性。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.5.1-hotfix-url-join
- **紧急修复：修正API端点URL的拼接逻辑**
  - **问题:** 在v3.5.0的重构中，构造请求URL的方式 `new URL('/models', apiUrl)` 存在缺陷。如果用户提供的 `apiUrl` 包含路径（如 `https://api.example.com/v1`），该方法会错误地生成 `https://api.example.com/models`，而不是正确的 `https://api.example.com/v1/models`，导致请求404并返回HTML错误页面，从而引发JSON解析失败。
  - **实现方式:**
    - **1. 改进URL拼接 (`scripts/settings/standaloneAPI.js`):**
        - 在 `testApiConnection` 和 `updateModelList` 两个函数中，都修改了URL的构造方式。
        - 新逻辑通过 `apiUrl.replace(/\/$/, '') + '/models'` 的方式，先移除 `apiUrl` 末尾可能存在的斜杠，然后再安全地拼接上目标路径，确保最终生成的URL总是正确的。
  - **结果:**
    - **URL构造正确:** API请求现在总是能指向正确的端点，彻底解决了因URL错误导致的HTML响应和JSON解析失败问题。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.5.0-hotfix-direct-api-request
- **核心重构：绕过酒馆后端，直接从前端请求API**
  - **问题:** 即便在请求中加入了API Key，测试连接和获取模型列表的功能依然失败，并返回“Unauthorized”错误。根本原因是插件通过SillyTavern后端代理API请求的方式存在问题：后端不会从POST请求体中读取并使用我们插件自定义的API Key，而是尝试读取酒馆自身的密钥，导致认证失败。
  - **实现方式:**
    - **1. 重构API测试逻辑 (`scripts/settings/standaloneAPI.js`):**
        - `testApiConnection` 函数不再使用 `$.ajax` 向酒馆后端发送代理请求。
        - **修改为** 使用 `fetch` API 直接向用户指定的API URL的 `/chat/completions` 端点发送 `POST` 请求。
        - 在请求的 `headers` 中正确设置 `Authorization: Bearer <apiKey>`，确保认证信息被目标服务器正确识别。
    - **2. 重构模型列表获取逻辑 (`scripts/settings/standaloneAPI.js`):**
        - `updateModelList` 函数同样不再通过酒馆后端代理。
        - **修改为** 使用 `fetch` API 直接向用户指定的API URL的 `/models` 端点发送 `GET` 请求。
        - 同样地，在请求的 `headers` 中也设置了正确的 `Authorization` 信息。
  - **结果:**
    - **认证问题彻底解决:** 通过绕过有问题的后端代理，直接从前端发起标准化的API请求，认证流程完全符合OpenAI兼容API的规范，API测试和模型列表获取功能现已完全恢复正常。
    - **逻辑更清晰:** 代码逻辑更加直接和清晰，减少了对SillyTavern内部实现的依赖，提高了插件的健壮性和可维护性。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.9-hotfix-auth-key
- **紧急修复：为模型列表请求添加API Key**
  - **问题:** API测试和获取模型列表的功能均失败，返回“Unauthorized”错误。根本原因是 `updateModelList` 函数在向API发送请求时，没有包含必需的API Key，导致请求因未授权而被拒绝。
  - **实现方式:**
    - **1. 在请求中加入API Key (`scripts/settings/standaloneAPI.js`):**
        - 修改了 `updateModelList` 函数，使其在执行 `$.ajax` 请求之前，会先调用 `getDecryptedApiKey()` 来获取用户保存的、已解密的API Key。
        - 将获取到的第一个有效API Key 添加到发送给 `/api/backends/chat-completions/status` 端点的请求体中。
  - **结果:**
    - **授权问题解决:** 获取模型列表的请求现在包含了正确的认证信息，能够通过服务器的验证，API测试和模型列表获取功能均已恢复正常。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.8-hotfix-model-list-compat
- **紧急修复：增强获取模型列表的兼容性**
  - **问题:** 在使用某些API代理或中转站时，获取模型列表的功能失败，并报告 `未返回有效模型列表` 错误。这是因为部分API返回的数据结构存在额外嵌套，例如 `{"data": {"data": [...]}}`，导致插件无法直接解析模型数组。
  - **实现方式:**
    - **1. 智能解析模型数据 (`scripts/settings/standaloneAPI.js`):**
        - 在 `updateModelList` 函数中，增加了一个新的逻辑来处理不同的响应格式。
        - 新代码会首先检查 `responseData.data` 是否为数组。如果不是，它会继续检查 `responseData.data.data` 是否为数组，从而能够正确地从嵌套结构中提取模型列表。
  - **结果:**
    - **兼容性提升:** 插件现在能够兼容更多种类的API响应格式，成功获取模型列表，解决了因数据结构不一致导致的问题。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.7-hotfix-response-handling
- **紧急修复：全面增强API响应处理，修复中转站兼容性**
  - **问题:** 当使用某些API中转站时，插件的API测试、调用及模型列表获取功能均可能失败，报告 `Invalid or empty response` 或 `未返回有效模型列表` 等错误。根本原因是部分代理返回的响应体是JSON字符串，而非标准的JSON对象，导致插件无法正确解析。
  - **实现方式:**
    - **1. 全面健壮化响应解析 (`scripts/settings/standaloneAPI.js`):**
        - 在 `testApiConnection`、`handleCustomAPIRequest` 和 `updateModelList` 三个核心API函数中，都增加了对返回数据的预处理逻辑。
        - 新逻辑会统一检查收到的 `data` 是否为字符串。如果是，则尝试使用 `JSON.parse()` 将其转换为JSON对象，然后再进行后续处理。
    - **2. 增强日志与错误提示 (`scripts/settings/standaloneAPI.js`):**
        - 在所有三个函数中，都加入了 `console.log` 来记录从API收到的原始响应数据，方便未来调试。
        - 当响应中找不到有效内容时，抛出的错误信息现在会包含完整的响应体（`响应: ${JSON.stringify(responseData)}`），使问题定位更加直观、精准。
  - **结果:**
    - **兼容性完美提升:** 插件现在能够正确处理所有自定义API场景下（测试、调用、获取模型）来自不同代理的响应，彻底解决了因响应格式不一致引发的所有已知问题。
    - **可调试性增强:** 详细的控制台日志和错误信息使得排查新的API问题变得更加容易。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.0-custom-api-refactor
- **核心重构：废弃独立API逻辑，全面转向SillyTavern原生API调用**
  - **问题:** 插件旧有的自定义API功能通过一个复杂的、自行实现的`LLMApiService`来处理请求，并提供了“代理/直连”切换选项。这种方式不仅代码冗余，而且无法完全兼容SillyTavern的所有功能（如模型列表获取、原生流式传输），导致用户体验不佳且维护困难。
  - **解决方案:** 废弃整个自定义的API请求链路，将插件的API调用逻辑完全并入SillyTavern的前端原生API体系。
  - **实现方式:**
    - **1. 废弃冗余代码 (`services/llmApi.js`):**
        - **完全删除了** `services/llmApi.js` 文件及其包含的 `LLMApiService` 类，移除了不必要的抽象层。
    - **2. 重构核心请求 (`scripts/settings/standaloneAPI.js`):**
        - 重写了 `handleCustomAPIRequest` 和 `testApiConnection` 函数。
        - **现在直接调用** 酒馆全局暴露的 `sendOpenAIRequest` 函数来发送所有API请求。
        - 在调用前，通过修改全局的 `oai_settings` 对象，临时将API源 (`chat_completion_source`) 设置为 `'custom'`，并填入用户自定义的URL、API密钥和模型名称。请求完成后，立即恢复原始设置。
    - **3. 修复模型列表获取 (`scripts/settings/standaloneAPI.js`):**
        - 重写了 `updateModelList` 函数。
        - 新逻辑直接向酒馆后端的 `/api/completions/status` 端点发送一个 `POST` 请求，并将 `chat_completion_source` 设为 `'custom'`，从而以原生方式获取模型列表。
    - **4. 简化UI与配置 (`assets/templates/index.html`, `data/pluginSetting.js`, `scripts/settings/userExtensionSetting.js`):**
        - **移除了** “通过酒馆代理API”的复选框及其对应的 `use_tavern_proxy` 配置项。
        - **新增了** “流式传输” (`custom_api_stream`) 选项，默认关闭，允许用户自行控制。
        - 更新了UI绑定逻辑，以适应新的配置项。
  - **结果:**
    - **完美集成:** 插件现在完全使用SillyTavern的官方API管道，确保了最佳的兼容性和稳定性。
    - **功能完整:** 自定义API现在可以**原生支持流式传输**，并且**能够可靠地获取模型列表**，解决了所有历史遗留问题。
    - **代码简化:** 代码库更加简洁，可维护性显著提高。
    - **体验提升:** 用户不再需要理解复杂的“代理”概念，只需关心是否需要“流式传输”，交互更加直观。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js` (重构)
    - `services/llmApi.js` (已删除)
    - `assets/templates/index.html` (UI调整)
    - `data/pluginSetting.js` (配置项更新)
    - `scripts/settings/userExtensionSetting.js` (UI绑定更新)
    - `项目文档.txt` (新增此条目)

v3.4.1-hotfix-import-path
- **紧急修复：修正原生API导入路径错误**
  - **问题:** v3.4.0重构后，`scripts/settings/standaloneAPI.js` 中引入了对酒馆主 `script.js` 的导入，但使用了错误的相对路径 (`../../../script.js`)，导致插件在加载时因找不到文件而崩溃 (404 Not Found)。
  - **实现方式:**
    - **1. 修正路径 (`scripts/settings/standaloneAPI.js`):**
        - 将错误的相对路径导入 `import { ... } from '../../../script.js';`
        - **修改为正确的绝对路径导入** `import { ... } from '/script.js';`，确保插件能从Web服务器根目录正确加载酒馆的核心脚本。
  - **结果:**
    - **加载错误解决:** 插件现在可以正常加载，之前因路径错误导致的404问题已被修复。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.6-hotfix-streaming-removal
- **功能简化：移除未实现的流式传输选项**
  - **问题:** v3.4.0重构引入了一个“流式传输”的UI选项，但其后端逻辑并未完全实现，导致用户勾选后程序报错。
  - **实现方式:**
    - **1. 移除UI元素 (`assets/templates/index.html`):**
        - **删除了** “流式传输”复选框及其相关描述。
    - **2. 移除配置项 (`data/pluginSetting.js`):**
        - **删除了** `custom_api_stream` 默认设置。
    - **3. 移除UI绑定 (`scripts/settings/userExtensionSetting.js`):**
        - **删除了** 对已不存在的复选框的事件监听和状态更新逻辑。
    - **4. 硬编码非流式 (`scripts/settings/standaloneAPI.js`):**
        - 在 `handleCustomAPIRequest` 函数中，**移除了**对 `custom_api_stream` 的检查，并将发送给后端的请求数据中的 `stream` 参数**硬编码为 `false`**。
  - **结果:**
    - **逻辑统一:** 插件的自定义API功能现在统一为非流式请求，符合当前已实现的功能，消除了用户的困惑和潜在的运行时错误。
    - **代码更清晰:** 移除了与未实现功能相关的代码，提高了可维护性。
  - **受影响文件:**
    - `assets/templates/index.html`
    - `data/pluginSetting.js`
    - `scripts/settings/userExtensionSetting.js`
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.5-hotfix-test-logic
- **紧急修复：修正API测试时的逻辑错误**
  - **问题:** API测试函数 (`testApiConnection`) 虽然能正确发送请求，但在构造请求时，没有将用户在UI中输入的`modelName`和`apiUrl`临时应用到全局设置中，导致测试时使用的仍然是旧的、已保存的模型和URL配置，与用户预期不符。
  - **实现方式:**
    - **1. 临时覆盖设置 (`scripts/settings/standaloneAPI.js`):**
        - 在 `testApiConnection` 函数的 `try` 块开始时，不仅覆盖了 `oai_settings`，还**额外覆盖了** `USER.IMPORTANT_USER_PRIVACY_DATA.custom_model_name` 和 `oai_settings.openai_reverse_proxy`。
    - **2. 确保恢复 (`scripts/settings/standaloneAPI.js`):**
        - 将所有恢复原始设置的操作移入一个 `finally` 块中，确保无论测试成功还是失败，用户的原始设置总能被正确还原。
  - **结果:**
    - **测试逻辑正确:** API测试功能现在会准确地使用用户在UI中提供的模型和URL进行测试，测试结果能够正确反映当前输入配置的有效性。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.4-hotfix-api-endpoint
- **紧急修复：修正获取模型列表的API端点路径**
  - **问题:** 在v3.4.3中，虽然请求方法被修正为`$.ajax`，但API端点URL `/api/completions/status` 仍然是错误的，导致服务器返回 `404 Not Found`。
  - **实现方式:**
    - **1. 修正URL (`scripts/settings/standaloneAPI.js`):**
        - 通过分析SillyTavern的后端路由结构，确定了正确的API端点。
        - 将 `updateModelList` 函数中的URL从 `/api/completions/status` **修正为** `/api/backends/chat-completions/status`。
  - **结果:**
    - **404错误解决:** 获取模型列表的请求现在指向了正确的后端路由，功能完全恢复正常。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.3-hotfix-csrf-token
- **紧急修复：修正模型列表获取时的CSRF令牌问题**
  - **问题:** v3.4.2修复导入问题后，`updateModelList` 函数虽然指向了正确的模块，但其使用的 `fetch` API 仍然无法自动附加SillyTavern必需的CSRF安全令牌，导致请求被服务器以 `403 Forbidden` 错误拒绝。
  - **实现方式:**
    - **1. 替换请求方法 (`scripts/settings/standaloneAPI.js`):**
        - 将 `updateModelList` 函数中使用的 `fetch` API 调用，**替换为 jQuery 的 `$.ajax` 方法**。
        - SillyTavern的前端配置了一个全局的 `$.ajaxPrefilter`，它会自动为所有 `$.ajax` 请求添加 `X-CSRF-Token` 请求头，从而解决了权限问题。
  - **结果:**
    - **权限错误解决:** 获取模型列表的请求现在能够通过服务器的安全验证，功能恢复正常。这是对原生API集成的最终修正。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)

v3.4.2-hotfix-export-name
- **紧急修复：修正模块导出名称错误**
  - **问题:** v3.4.1修复路径后，暴露出新的问题：SillyTavern的 `script.js` 并非一个标准的ES模块，它不会直接 `export` 变量。相反，它将 `oai_settings` 等变量挂载在`/public/scripts/openai.js`上。直接从 `/script.js` 导入它们会导致 `does not provide an export named 'oai_settings'` 错误。
  - **实现方式:**
    - **1. 修正导入源 (`scripts/settings/standaloneAPI.js`):**
        - 将导入语句从 `import { ... } from '/script.js';`
        - **修改为直接从正确的源模块导入** `import { ... } from '/scripts/openai.js';`
  - **结果:**
    - **模块加载成功:** 插件现在可以正确地从源头导入所需的函数和变量，彻底解决了因重构引入的两个连续加载错误。
  - **受影响文件:**
    - `scripts/settings/standaloneAPI.js`
    - `项目文档.txt` (新增此条目)
